name: 🚀 Wealth Tracker CI/CD Pipeline
run-name: ${{ github.actor }} is automating wealth tracking 💰

on:
  # Trigger on every push and PR
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  
  # Allow manual triggers
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

# Environment variables
env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # 🧪 Code Quality & Security
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort bandit safety
        
    - name: 🎨 Code formatting check (Black)
      run: black --check --diff .
      
    - name: 📋 Import sorting check (isort)
      run: isort --check-only --diff .
      
    - name: 🔍 Linting (Flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: 🛡️ Security scan (Bandit)
      run: bandit -r . -f json -o bandit-report.json || true
      
    - name: 🔒 Dependency vulnerability check
      run: safety check --json --output safety-report.json || true
      
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # 🧪 Python Testing
  test-python:
    name: 🧪 Python Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
        
    - name: 🧪 Run Python tests
      run: |
        # Test core financial calculations
        python -c "
        import pandas as pd
        import yfinance as yf
        from datetime import datetime
        print('✅ Core imports working')
        
        # Test CSV processing
        test_data = {'symbol': ['VTI', 'AAPL'], 'shares': [10, 5], 'avg_cost': [100, 150]}
        df = pd.DataFrame(test_data)
        print('✅ CSV processing working')
        
        # Test yfinance data fetch
        try:
            ticker = yf.Ticker('VTI')
            info = ticker.info
            print('✅ Market data fetch working')
        except:
            print('⚠️ Market data fetch offline (expected in CI)')
        "
        
    - name: 📊 Test SoFi CSV Cleaner
      run: |
        python data/sofi_cleaner.py sample_portfolio.csv --output test_cleaned.csv
        if [ -f "test_cleaned.csv" ]; then
          echo "✅ SoFi CSV cleaner working"
          rm test_cleaned.csv
        else
          echo "❌ SoFi CSV cleaner failed"
          exit 1
        fi
      shell: bash

  # 🌐 Streamlit App Testing
  test-streamlit:
    name: 🌐 Streamlit App Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install selenium pytest-playwright
        
    - name: 🎭 Install Playwright
      run: playwright install chromium
      
    - name: 🧪 Test Streamlit app import
      run: |
        python -c "
        import app
        import financial_apis
        print('✅ Streamlit app imports successfully')
        "
        
    - name: 🌐 Test Streamlit app startup
      run: |
        # Start Streamlit in background
        streamlit run app.py --server.headless true --server.port 8501 &
        STREAMLIT_PID=$!
        
        # Wait for startup
        sleep 10
        
        # Test if app is responding
        curl -f http://localhost:8501/_stcore/health || exit 1
        echo "✅ Streamlit app started successfully"
        
        # Cleanup
        kill $STREAMLIT_PID

  # 💾 Data Validation
  validate-data:
    name: 💾 Data & CSV Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pandas-profiling
        
    - name: 📊 Validate sample portfolio CSV
      run: |
        python -c "
        import pandas as pd
        
        # Load and validate sample CSV
        df = pd.read_csv('sample_portfolio.csv')
        print(f'✅ Sample CSV loaded: {len(df)} rows')
        
        # Check required columns
        required_cols = ['Symbol', 'Shares', 'Average_Cost']
        missing_cols = [col for col in required_cols if col not in df.columns]
        if missing_cols:
            raise ValueError(f'Missing columns: {missing_cols}')
        print('✅ Required columns present')
        
        # Validate data types
        assert df['Shares'].dtype in ['int64', 'float64'], 'Shares must be numeric'
        assert df['Average_Cost'].dtype in ['int64', 'float64'], 'Average_Cost must be numeric'
        print('✅ Data types valid')
        
        # Check for negative values
        assert (df['Shares'] > 0).all(), 'All shares must be positive'
        assert (df['Average_Cost'] > 0).all(), 'All costs must be positive'
        print('✅ Data validation passed')
        "
        
    - name: 🧹 Test SoFi CSV cleaning formats
      run: |
        # Test multiple CSV formats
        python -c "
        import pandas as pd
        from data.sofi_cleaner import clean_sofi_investment_csv
        
        # Test format 1: Standard SoFi format
        test_data1 = {
            'Symbol': ['VTI', 'SOFI', 'AAPL'],
            'Shares': [15.5, 100, 8],
            'Cost_Basis': [2800, 1200, 1600],
            'Market_Value': [2900, 1100, 1700]
        }
        df1 = pd.DataFrame(test_data1)
        df1.to_csv('test_sofi_format1.csv', index=False)
        result1 = clean_sofi_investment_csv('test_sofi_format1.csv', 'cleaned1.csv')
        print('✅ SoFi format 1 processed')
        
        # Test format 2: Alternative column names
        test_data2 = {
            'Ticker': ['BTC-USD', 'ETH-USD'],
            'Quantity': [0.25, 2.0],
            'Average_Cost': [45000, 2800]
        }
        df2 = pd.DataFrame(test_data2)
        df2.to_csv('test_sofi_format2.csv', index=False)
        result2 = clean_sofi_investment_csv('test_sofi_format2.csv', 'cleaned2.csv')
        print('✅ SoFi format 2 processed')
        
        print('✅ All CSV format tests passed')
        "

  # 🛡️ Security & Privacy Check
  privacy-check:
    name: 🛡️ Privacy & Security Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Check for sensitive data leaks
      run: |
        # Ensure no real financial data in repo
        if grep -r -i "account.*number\|ssn\|social.*security\|routing.*number" . --exclude-dir=.git --exclude="*.md"; then
          echo "❌ Potential sensitive data found"
          exit 1
        fi
        echo "✅ No sensitive data detected"
        
    - name: 🔒 Validate .gitignore protection
      run: |
        # Check .gitignore includes financial data protection
        if ! grep -q "data/" .gitignore; then
          echo "❌ .gitignore missing data/ protection"
          exit 1
        fi
        if ! grep -q "\.env" .gitignore; then
          echo "❌ .gitignore missing .env protection"
          exit 1
        fi
        if ! grep -q "\.csv" .gitignore; then
          echo "❌ .gitignore missing .csv protection"
          exit 1
        fi
        echo "✅ .gitignore properly configured for financial privacy"
        
    - name: 🔐 Check for hardcoded credentials
      run: |
        # Scan for potential hardcoded API keys or passwords
        if grep -r -E "(api[_-]?key|password|secret|token).*=.*['\"][^'\"]{10,}" . --exclude-dir=.git --exclude="*.md" --exclude="*.yml"; then
          echo "❌ Potential hardcoded credentials found"
          exit 1
        fi
        echo "✅ No hardcoded credentials detected"

  # 🚀 Build & Package
  build:
    name: 🚀 Build & Package
    runs-on: ubuntu-latest
    needs: [code-quality, test-python, test-streamlit, validate-data, privacy-check]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build wheel
        
    - name: 🏗️ Build application package
      run: |
        # Create deployment package
        mkdir -p dist/wealth-tracker
        cp -r . dist/wealth-tracker/
        cd dist/wealth-tracker
        
        # Remove development files
        rm -rf .git .github __pycache__ *.pyc
        rm -f .env .env.example
        
        # Create version info
        echo "BUILD_DATE=$(date)" > BUILD_INFO
        echo "COMMIT_SHA=${{ github.sha }}" >> BUILD_INFO
        echo "BRANCH=${{ github.ref_name }}" >> BUILD_INFO
        
        # Create deployment archive
        cd ..
        tar -czf wealth-tracker-${{ github.sha }}.tar.gz wealth-tracker/
        echo "✅ Application packaged successfully"
        
    - name: 📊 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wealth-tracker-build
        path: dist/wealth-tracker-${{ github.sha }}.tar.gz
        retention-days: 30

  # 🚀 Deploy (Manual Trigger Only)
  deploy:
    name: 🚀 Deploy Application
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.deploy_env }}
    
    steps:
    - name: 📥 Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: wealth-tracker-build
        
    - name: 🚀 Deploy to ${{ github.event.inputs.deploy_env }}
      run: |
        echo "🚀 Deploying to ${{ github.event.inputs.deploy_env }} environment"
        echo "📦 Package: wealth-tracker-${{ github.sha }}.tar.gz"
        echo "🌐 Would deploy Streamlit app to cloud platform"
        echo "✅ Deployment simulation complete"
        
        # In real deployment, this would:
        # - Upload to cloud platform (AWS, Azure, GCP)
        # - Update container registry
        # - Deploy to Kubernetes/Docker
        # - Update load balancer
        # - Run health checks

  # 📢 Notifications
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    
    steps:
    - name: 📢 Success notification
      if: needs.build.result == 'success'
      run: |
        echo "🎉 Wealth Tracker CI/CD Pipeline completed successfully!"
        echo "✅ All tests passed"
        echo "✅ Security checks passed"
        echo "✅ Build completed"
        echo "📦 Ready for deployment"
        
        # In production, send to:
        # - Slack webhook
        # - Discord webhook  
        # - Email notification
        # - Teams notification
        
    - name: 📢 Failure notification
      if: failure()
      run: |
        echo "❌ Wealth Tracker CI/CD Pipeline failed!"
        echo "🔍 Check the logs for details"
        echo "🛠️ Fix issues and try again"
        
        # In production, send failure alerts
        
    - name: 📊 Pipeline summary
      run: |
        echo "## 📊 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Python Tests | ${{ needs.test-python.result || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Streamlit Tests | ${{ needs.test-streamlit.result || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Data Validation | ${{ needs.validate-data.result || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Privacy Check | ${{ needs.privacy-check.result || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Ready for production!** Your wealth tracker is tested and secure." >> $GITHUB_STEP_SUMMARY 